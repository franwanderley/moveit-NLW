{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"C:/Users/Wanderley/Desktop/moveit-next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Wanderley\\\\Desktop\\\\moveit-next\\\\src\\\\context\\\\CountdownContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nexport var CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var resetCountdown = function resetCountdown() {\n    setIsActive(false);\n    clearTimeout(countdownTimeout);\n    setHasFinished(false);\n  };\n\n  var startCountDown = function startCountDown() {\n    setIsActive(true);\n  };\n\n  var countdownTimeout;\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallengs = _useContext.startNewChallengs;\n\n  var _useState = useState(25 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minute = Math.floor(time / 60); //Arredonda para baixo\n\n  var second = time % 60; //O resto que será os segundos\n\n  var _String$padStart$spli = String(minute).padStart(2, '0').split(''),\n      _String$padStart$spli2 = _slicedToArray(_String$padStart$spli, 2),\n      minuteLeft = _String$padStart$spli2[0],\n      minuteRight = _String$padStart$spli2[1];\n\n  var _String$padStart$spli3 = String(second).padStart(2, '0').split(''),\n      _String$padStart$spli4 = _slicedToArray(_String$padStart$spli3, 2),\n      secondLeft = _String$padStart$spli4[0],\n      secondRight = _String$padStart$spli4[1]; //Para parar e continuar o cronometro\n\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setTime(25 * 60);\n      setIsActive(false);\n      setHasFinished(true);\n      startNewChallengs();\n    } else setTime(0.1 * 60);\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minute: minute,\n      second: second,\n      hasFinished: hasFinished,\n      isActive: isActive,\n      resetCountdown: resetCountdown,\n      startCountDown: startCountDown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n}\n\n_s(CountdownProvider, \"uE4r99biLTpx0w2WxmHfPOtFyNY=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["C:/Users/Wanderley/Desktop/moveit-next/src/context/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","CountdownProvider","children","resetCountdown","setIsActive","clearTimeout","countdownTimeout","setHasFinished","startCountDown","startNewChallengs","time","setTime","isActive","hasFinished","minute","Math","floor","second","String","padStart","split","minuteLeft","minuteRight","secondLeft","secondRight","setTimeout"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAAyE,OAAzE;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAWC,OAAO,IAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAER,OAAO,SAASM,iBAAT,OAAiE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAEpE,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAEC,IAAAA,WAAW,CAAC,KAAD,CAAX;AAAoBC,IAAAA,YAAY,CAACC,gBAAD,CAAZ;AAAgCC,IAAAA,cAAc,CAAC,KAAD,CAAd;AAAuB,GAA1G;;AACA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAEJ,IAAAA,WAAW,CAAC,IAAD,CAAX;AAAmB,GAAlD;;AAEA,MAAIE,gBAAJ;;AALoE,oBAMxCV,UAAU,CAACG,iBAAD,CAN8B;AAAA,MAM7DU,iBAN6D,eAM7DA,iBAN6D;;AAAA,kBAQ5CX,QAAQ,CAAS,KAAK,EAAd,CARoC;AAAA,MAQ7DY,IAR6D;AAAA,MAQvDC,OARuD;;AAAA,mBASpCb,QAAQ,CAAU,KAAV,CAT4B;AAAA,MAS7Dc,QAT6D;AAAA,MASnDR,WATmD;;AAAA,mBAU9BN,QAAQ,CAAU,KAAV,CAVsB;AAAA,MAU7De,WAV6D;AAAA,MAUhDN,cAVgD;;AAYpE,MAAMO,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAI,GAAC,EAAhB,CAAf,CAZoE,CAYhC;;AACpC,MAAMO,MAAM,GAAGP,IAAI,GAAG,EAAtB,CAboE,CAa1C;;AAb0C,8BAclCQ,MAAM,CAACJ,MAAD,CAAN,CAAeK,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,EAAgCC,KAAhC,CAAsC,EAAtC,CAdkC;AAAA;AAAA,MAc7DC,UAd6D;AAAA,MAcjDC,WAdiD;;AAAA,+BAelCJ,MAAM,CAACD,MAAD,CAAN,CAAeE,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,EAAgCC,KAAhC,CAAsC,EAAtC,CAfkC;AAAA;AAAA,MAe7DG,UAf6D;AAAA,MAejDC,WAfiD,8BAiBpE;;;AACA3B,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIe,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACtBJ,MAAAA,gBAAgB,GAAGmB,UAAU,CAAC,YAAM;AAChCd,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF4B,EAE3B,IAF2B,CAA7B;AAGH,KAJD,MAIM,IAAGE,QAAQ,IAAIF,IAAI,KAAK,CAAxB,EAA0B;AAC5BC,MAAAA,OAAO,CAAC,KAAK,EAAN,CAAP;AACAP,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAG,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,MAAAA,iBAAiB;AACpB,KALK,MAMFE,OAAO,CAAC,MAAM,EAAP,CAAP;AAEP,GAbQ,EAaN,CAACC,QAAD,EAAWF,IAAX,CAbM,CAAT;AAeA,sBACK,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAI;AAACI,MAAAA,MAAM,EAANA,MAAD;AAASG,MAAAA,MAAM,EAANA,MAAT;AAAiBJ,MAAAA,WAAW,EAAXA,WAAjB;AAA8BD,MAAAA,QAAQ,EAARA,QAA9B;AAAwCT,MAAAA,cAAc,EAAdA,cAAxC;AAAwDK,MAAAA,cAAc,EAAdA;AAAxD,KAApC;AAAA,cACKN;AADL;AAAA;AAAA;AAAA;AAAA,UADL;AAKH;;GAtCeD,iB;;KAAAA,iB","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState} from \"react\";\r\nimport { ChallengesContext } from \"./ChallengesContext\";\r\n\r\ninterface CountdownContextData {\r\n    minute : number;\r\n    second : number;\r\n    hasFinished : boolean; \r\n    isActive : boolean;\r\n    resetCountdown : () => void; \r\n    startCountDown : () => void;\r\n}\r\n\r\n export const CountdownContext = createContext({} as CountdownContextData);\r\n\r\nexport function CountdownProvider ({children} : {children : ReactNode}) {\r\n\r\n    const resetCountdown = () => { setIsActive(false); clearTimeout(countdownTimeout); setHasFinished(false) };\r\n    const startCountDown = () => { setIsActive(true) };\r\n\r\n    let countdownTimeout : NodeJS.Timeout;\r\n    const {startNewChallengs} = useContext(ChallengesContext);\r\n    \r\n    const [time, setTime] = useState<number>(25 * 60);\r\n    const [isActive, setIsActive] = useState<boolean>(false);\r\n    const [hasFinished, setHasFinished] = useState<boolean>(false);\r\n\r\n    const minute = Math.floor(time/60); //Arredonda para baixo\r\n    const second = time % 60; //O resto que será os segundos\r\n    const [minuteLeft, minuteRight] = String(minute).padStart(2, '0').split('');\r\n    const [secondLeft, secondRight] = String(second).padStart(2, '0').split('');\r\n\r\n    //Para parar e continuar o cronometro\r\n    useEffect(() => {\r\n        if( isActive && time > 0 ){\r\n            countdownTimeout = setTimeout(() => {\r\n                setTime(time - 1);\r\n            },1000);\r\n        }else if(isActive && time === 0){\r\n            setTime(25 * 60);\r\n            setIsActive(false);\r\n            setHasFinished(true);\r\n            startNewChallengs();\r\n        }else\r\n            setTime(0.1 * 60);\r\n    \r\n    }, [isActive, time]);\r\n\r\n    return (\r\n         <CountdownContext.Provider value = {{minute, second, hasFinished, isActive, resetCountdown, startCountDown}}>\r\n             {children}\r\n         </CountdownContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}