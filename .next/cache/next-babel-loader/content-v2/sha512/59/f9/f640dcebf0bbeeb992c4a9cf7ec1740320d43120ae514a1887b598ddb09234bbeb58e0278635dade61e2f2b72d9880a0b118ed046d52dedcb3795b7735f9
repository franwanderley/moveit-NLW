{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Wanderley\\\\Desktop\\\\moveit-next\\\\src\\\\context\\\\CountdownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nexport const CountdownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider({\n  children\n}) {\n  const resetCountdown = () => {\n    setIsActive(false);\n    clearTimeout(countdownTimeout);\n    setHasFinished(false);\n  };\n\n  const startCountDown = () => {\n    setIsActive(true);\n  };\n\n  let countdownTimeout;\n  const {\n    startNewChallengs\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minute = Math.floor(time / 60); //Arredonda para baixo\n\n  const second = time % 60; //O resto que será os segundos\n\n  const [minuteLeft, minuteRight] = String(minute).padStart(2, '0').split('');\n  const [secondLeft, secondRight] = String(second).padStart(2, '0').split(''); //Para parar e continuar o cronometro\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setTime(0.1 * 60);\n      setIsActive(false);\n      setHasFinished(true);\n      startNewChallengs();\n    } else setTime(0.1 * 60);\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minute,\n      second,\n      hasFinished,\n      isActive,\n      resetCountdown,\n      startCountDown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Wanderley/Desktop/moveit-next/src/context/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","CountdownProvider","children","resetCountdown","setIsActive","clearTimeout","countdownTimeout","setHasFinished","startCountDown","startNewChallengs","time","setTime","isActive","hasFinished","minute","Math","floor","second","minuteLeft","minuteRight","String","padStart","split","secondLeft","secondRight","setTimeout"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAAyE,OAAzE;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAWC,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAER,OAAO,SAASM,iBAAT,CAA4B;AAACC,EAAAA;AAAD,CAA5B,EAAiE;AAEpE,QAAMC,cAAc,GAAG,MAAM;AAAEC,IAAAA,WAAW,CAAC,KAAD,CAAX;AAAoBC,IAAAA,YAAY,CAACC,gBAAD,CAAZ;AAAgCC,IAAAA,cAAc,CAAC,KAAD,CAAd;AAAuB,GAA1G;;AACA,QAAMC,cAAc,GAAG,MAAM;AAAEJ,IAAAA,WAAW,CAAC,IAAD,CAAX;AAAmB,GAAlD;;AAEA,MAAIE,gBAAJ;AACA,QAAM;AAACG,IAAAA;AAAD,MAAsBb,UAAU,CAACG,iBAAD,CAAtC;AAEA,QAAM;AAAA,OAACW,IAAD;AAAA,OAAOC;AAAP,MAAkBb,QAAQ,CAAS,MAAM,EAAf,CAAhC;AACA,QAAM;AAAA,OAACc,QAAD;AAAA,OAAWR;AAAX,MAA0BN,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM;AAAA,OAACe,WAAD;AAAA,OAAcN;AAAd,MAAgCT,QAAQ,CAAU,KAAV,CAA9C;AAEA,QAAMgB,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAI,GAAC,EAAhB,CAAf,CAZoE,CAYhC;;AACpC,QAAMO,MAAM,GAAGP,IAAI,GAAG,EAAtB,CAboE,CAa1C;;AAC1B,QAAM,CAACQ,UAAD,EAAaC,WAAb,IAA4BC,MAAM,CAACN,MAAD,CAAN,CAAeO,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,EAAgCC,KAAhC,CAAsC,EAAtC,CAAlC;AACA,QAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BJ,MAAM,CAACH,MAAD,CAAN,CAAeI,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,EAAgCC,KAAhC,CAAsC,EAAtC,CAAlC,CAfoE,CAiBpE;;AACAzB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIe,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACtBJ,MAAAA,gBAAgB,GAAGmB,UAAU,CAAC,MAAM;AAChCd,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF4B,EAE3B,IAF2B,CAA7B;AAGH,KAJD,MAIM,IAAGE,QAAQ,IAAIF,IAAI,KAAK,CAAxB,EAA0B;AAC5BC,MAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACAP,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAG,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,MAAAA,iBAAiB;AACpB,KALK,MAMFE,OAAO,CAAC,MAAM,EAAP,CAAP;AAEP,GAbQ,EAaN,CAACC,QAAD,EAAWF,IAAX,CAbM,CAAT;AAeA,sBACK,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAI;AAACI,MAAAA,MAAD;AAASG,MAAAA,MAAT;AAAiBJ,MAAAA,WAAjB;AAA8BD,MAAAA,QAA9B;AAAwCT,MAAAA,cAAxC;AAAwDK,MAAAA;AAAxD,KAApC;AAAA,cACKN;AADL;AAAA;AAAA;AAAA;AAAA,UADL;AAKH","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState} from \"react\";\r\nimport { ChallengesContext } from \"./ChallengesContext\";\r\n\r\ninterface CountdownContextData {\r\n    minute : number;\r\n    second : number;\r\n    hasFinished : boolean; \r\n    isActive : boolean;\r\n    resetCountdown : () => void; \r\n    startCountDown : () => void;\r\n}\r\n\r\n export const CountdownContext = createContext({} as CountdownContextData);\r\n\r\nexport function CountdownProvider ({children} : {children : ReactNode}) {\r\n\r\n    const resetCountdown = () => { setIsActive(false); clearTimeout(countdownTimeout); setHasFinished(false) };\r\n    const startCountDown = () => { setIsActive(true) };\r\n\r\n    let countdownTimeout : NodeJS.Timeout;\r\n    const {startNewChallengs} = useContext(ChallengesContext);\r\n    \r\n    const [time, setTime] = useState<number>(0.1 * 60);\r\n    const [isActive, setIsActive] = useState<boolean>(false);\r\n    const [hasFinished, setHasFinished] = useState<boolean>(false);\r\n\r\n    const minute = Math.floor(time/60); //Arredonda para baixo\r\n    const second = time % 60; //O resto que será os segundos\r\n    const [minuteLeft, minuteRight] = String(minute).padStart(2, '0').split('');\r\n    const [secondLeft, secondRight] = String(second).padStart(2, '0').split('');\r\n\r\n    //Para parar e continuar o cronometro\r\n    useEffect(() => {\r\n        if( isActive && time > 0 ){\r\n            countdownTimeout = setTimeout(() => {\r\n                setTime(time - 1);\r\n            },1000);\r\n        }else if(isActive && time === 0){\r\n            setTime(0.1 * 60);\r\n            setIsActive(false);\r\n            setHasFinished(true);\r\n            startNewChallengs();\r\n        }else\r\n            setTime(0.1 * 60);\r\n    \r\n    }, [isActive, time]);\r\n\r\n    return (\r\n         <CountdownContext.Provider value = {{minute, second, hasFinished, isActive, resetCountdown, startCountDown}}>\r\n             {children}\r\n         </CountdownContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}