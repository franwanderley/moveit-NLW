{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Wanderley\\\\Desktop\\\\moveit-next\\\\src\\\\context\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport challenges from '../../challenges.json';\nimport Cookies from 'js-cookie';\n;\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengeCompleted = _useState3[0],\n      setChallengeCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function completeChallenge() {\n    console.log('completeChallenge');\n    if (!activeChallenge) return;\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      levelUp();\n      setCurrentExperience(finalExperience - experienceToNextLevel);\n      setActiveChallenge(null);\n      setChallengeCompleted(challengeCompleted + 1);\n    }\n  }\n\n  function startNewChallengs() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    setActiveChallenge(challenges[randomChallengeIndex]); //Audio\n\n    new Audio('/notification.mp3').play(); //Notificação\n\n    if (Notification.permission === \"granted\") {\n      new Notification('Novo Desafio', {\n        'body': \"Valendo \".concat(challenges[randomChallengeIndex].amount, \" xp!\"),\n        'icon': \"favicon.png\"\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  } //Notificação\n\n\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []); //Salvar em cookies\n\n  useEffect(function () {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengeCompleted', String(challengeCompleted));\n  }, [level, currentExperience, challengeCompleted]);\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengeCompleted: challengeCompleted,\n      startNewChallengs: startNewChallengs,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      experienceToNextLevel: experienceToNextLevel,\n      completeChallenge: completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"stRdqq4pRkKK/+Zk7suSpAC1l7A=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/Users/Wanderley/Desktop/moveit-next/src/context/ChallengesContext.tsx"],"names":["createContext","useEffect","useState","challenges","Cookies","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengeCompleted","setChallengeCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","completeChallenge","console","log","amount","finalExperience","startNewChallengs","randomChallengeIndex","floor","random","length","Audio","play","Notification","permission","resetChallenge","requestPermission","set","String"],"mappings":"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","sourcesContent":["import {createContext, ReactNode, useEffect, useState} from 'react';\r\nimport challenges from '../../challenges.json';\r\nimport Cookies from 'js-cookie';\r\n\r\n\r\ninterface ChallengesProviderProps {\r\n    children : ReactNode;\r\n}\r\ninterface ActiveChallenge  {\r\n    type              : 'body' | 'eye';\r\n    description       : string;\r\n    amount            : number; \r\n};\r\ninterface ChallengesContextData{\r\n    level                 : number; \r\n    currentExperience     : number;\r\n    challengeCompleted    : number; \r\n    startNewChallengs     : () => void;\r\n    activeChallenge       : ActiveChallenge;\r\n    resetChallenge        : () => void;\r\n    completeChallenge     : () => void;\r\n    experienceToNextLevel : number;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\nexport function ChallengesProvider({ children } : ChallengesProviderProps) {\r\n    const [level, setLevel] = useState<number>(1);\r\n    const [currentExperience,setCurrentExperience] = useState<number>(0);\r\n    const [challengeCompleted, setChallengeCompleted] = useState<number>(0);\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2); \r\n\r\n    function levelUp(){\r\n        setLevel(level + 1);\r\n    }\r\n    function completeChallenge() {\r\n        console.log('completeChallenge');\r\n        if(! activeChallenge)\r\n            return ;\r\n        const { amount } = activeChallenge;\r\n        let finalExperience = currentExperience + amount;\r\n        if(finalExperience >= experienceToNextLevel){\r\n            levelUp();\r\n            setCurrentExperience(finalExperience - experienceToNextLevel);\r\n            setActiveChallenge(null);\r\n            setChallengeCompleted(challengeCompleted + 1);\r\n        }\r\n    }\r\n\r\n    function startNewChallengs(){\r\n       const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n       setActiveChallenge(challenges[randomChallengeIndex]);\r\n        //Audio\r\n        new Audio('/notification.mp3').play();\r\n       //Notificação\r\n       if(Notification.permission === \"granted\"){\r\n           new Notification('Novo Desafio', {\r\n               'body' : `Valendo ${challenges[randomChallengeIndex].amount} xp!`,\r\n               'icon' : `favicon.png`\r\n           })\r\n       }\r\n    }\r\n\r\n    function resetChallenge(){\r\n        setActiveChallenge(null);\r\n    }\r\n    //Notificação\r\n    useEffect(() => {\r\n        Notification.requestPermission();\r\n    }, []);\r\n\r\n    //Salvar em cookies\r\n    useEffect(() => {\r\n        Cookies.set('level', String(level));\r\n        Cookies.set('currentExperience', String(currentExperience));\r\n        Cookies.set('challengeCompleted', String(challengeCompleted));\r\n\r\n    }, [level, currentExperience, challengeCompleted]);\r\n\r\n    return (\r\n    <ChallengesContext.Provider value={{ level, currentExperience, challengeCompleted, startNewChallengs, activeChallenge, resetChallenge, experienceToNextLevel, completeChallenge}}>\r\n            {children}\r\n        </ChallengesContext.Provider>\r\n    );\r\n} "]},"metadata":{},"sourceType":"module"}