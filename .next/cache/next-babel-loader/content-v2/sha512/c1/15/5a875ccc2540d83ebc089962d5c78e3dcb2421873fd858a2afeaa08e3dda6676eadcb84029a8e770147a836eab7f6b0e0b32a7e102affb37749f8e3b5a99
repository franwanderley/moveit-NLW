{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Wanderley\\\\Desktop\\\\moveit-next\\\\src\\\\context\\\\ChallengesContext.tsx\";\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\n;\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengeCompleted,\n    1: setChallengeCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function completeChallenge() {\n    console.log('completeChallenge');\n    if (!activeChallenge) return;\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      levelUp();\n      setCurrentExperience(finalExperience - experienceToNextLevel);\n      setActiveChallenge(null);\n      setChallengeCompleted(challengeCompleted + 1);\n    }\n  }\n\n  function startNewChallengs() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    setActiveChallenge(challenges[randomChallengeIndex]);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengeCompleted,\n      startNewChallengs,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Wanderley/Desktop/moveit-next/src/context/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengeCompleted","setChallengeCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","completeChallenge","console","log","amount","finalExperience","startNewChallengs","randomChallengeIndex","floor","random","length","resetChallenge"],"mappings":";;AAAA,SAAQA,aAAR,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AASC;AAYD,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AACP,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAoE;AACvE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAS,CAAT,CAAlC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAmBC;AAAnB,MAA2CR,QAAQ,CAAS,CAAT,CAAzD;AACA,QAAM;AAAA,OAACS,kBAAD;AAAA,OAAqBC;AAArB,MAA8CV,QAAQ,CAAS,CAAT,CAA5D;AACA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAkB,IAAlB,CAAtD;AAEA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AAEA,WAASW,OAAT,GAAkB;AACdV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AACD,WAASY,iBAAT,GAA6B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,QAAG,CAAER,eAAL,EACI;AACJ,UAAM;AAAES,MAAAA;AAAF,QAAaT,eAAnB;AACA,QAAIU,eAAe,GAAGd,iBAAiB,GAAGa,MAA1C;;AACA,QAAGC,eAAe,IAAIR,qBAAtB,EAA4C;AACxCG,MAAAA,OAAO;AACPR,MAAAA,oBAAoB,CAACa,eAAe,GAAGR,qBAAnB,CAApB;AACAD,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,MAAAA,qBAAqB,CAACD,kBAAkB,GAAG,CAAtB,CAArB;AACH;AACJ;;AAED,WAASa,iBAAT,GAA4B;AACzB,UAAMC,oBAAoB,GAAGT,IAAI,CAACU,KAAL,CAAWV,IAAI,CAACW,MAAL,KAAgBxB,UAAU,CAACyB,MAAtC,CAA7B;AACAd,IAAAA,kBAAkB,CAACX,UAAU,CAACsB,oBAAD,CAAX,CAAlB;AACF;;AAED,WAASI,cAAT,GAAyB;AACrBf,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAGD,sBACA,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAAEP,MAAAA,KAAF;AAASE,MAAAA,iBAAT;AAA4BE,MAAAA,kBAA5B;AAAgDa,MAAAA,iBAAhD;AAAmEX,MAAAA,eAAnE;AAAoFgB,MAAAA,cAApF;AAAoGd,MAAAA,qBAApG;AAA2HI,MAAAA;AAA3H,KAAnC;AAAA,cACSb;AADT;AAAA;AAAA;AAAA;AAAA,UADA;AAKH","sourcesContent":["import {createContext, ReactNode, useState} from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface ChallengesProviderProps {\r\n    children : ReactNode;\r\n}\r\ninterface ActiveChallenge  {\r\n    type              : 'body' | 'eye';\r\n    description       : string;\r\n    amount            : number; \r\n};\r\ninterface ChallengesContextData{\r\n    level                 : number; \r\n    currentExperience     : number;\r\n    challengeCompleted    : number; \r\n    startNewChallengs     : () => void;\r\n    activeChallenge       : ActiveChallenge;\r\n    resetChallenge        : () => void;\r\n    completeChallenge     : () => void;\r\n    experienceToNextLevel : number;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\nexport function ChallengesProvider({ children } : ChallengesProviderProps) {\r\n    const [level, setLevel] = useState<number>(1);\r\n    const [currentExperience,setCurrentExperience] = useState<number>(0);\r\n    const [challengeCompleted, setChallengeCompleted] = useState<number>(0);\r\n    const [activeChallenge, setActiveChallenge] = useState<ActiveChallenge>(null);\r\n\r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2); \r\n\r\n    function levelUp(){\r\n        setLevel(level + 1);\r\n    }\r\n    function completeChallenge() {\r\n        console.log('completeChallenge');\r\n        if(! activeChallenge)\r\n            return ;\r\n        const { amount } = activeChallenge;\r\n        let finalExperience = currentExperience + amount;\r\n        if(finalExperience >= experienceToNextLevel){\r\n            levelUp();\r\n            setCurrentExperience(finalExperience - experienceToNextLevel);\r\n            setActiveChallenge(null);\r\n            setChallengeCompleted(challengeCompleted + 1);\r\n        }\r\n    }\r\n\r\n    function startNewChallengs(){\r\n       const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n       setActiveChallenge(challenges[randomChallengeIndex]);\r\n    }\r\n\r\n    function resetChallenge(){\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n\r\n    return (\r\n    <ChallengesContext.Provider value={{ level, currentExperience, challengeCompleted, startNewChallengs, activeChallenge, resetChallenge, experienceToNextLevel, completeChallenge}}>\r\n            {children}\r\n        </ChallengesContext.Provider>\r\n    );\r\n} "]},"metadata":{},"sourceType":"module"}