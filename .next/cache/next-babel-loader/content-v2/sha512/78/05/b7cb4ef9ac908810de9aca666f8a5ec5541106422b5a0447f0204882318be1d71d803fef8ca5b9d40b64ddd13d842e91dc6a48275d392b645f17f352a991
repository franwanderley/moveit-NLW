{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Wanderley\\\\Desktop\\\\moveit-next\\\\src\\\\context\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengeCompleted = _useState3[0],\n      setChallengeCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallengs() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    setActiveChallenge(challenges[randomChallengeIndex]);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengeCompleted: challengeCompleted,\n      levelUp: levelUp,\n      startNewChallengs: startNewChallengs,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"qQ0XlEfUUG8orBiIbgXk7qToIRM=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/Users/Wanderley/Desktop/moveit-next/src/context/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengeCompleted","setChallengeCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallengs","randomChallengeIndex","Math","floor","random","length","resetChallenge"],"mappings":";;;;;AAAA,SAAQA,aAAR,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAmBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AACP,OAAO,SAASI,kBAAT,OAAoE;AAAA;;AAAA,MAAtCC,QAAsC,QAAtCA,QAAsC;;AAAA,kBAC7CJ,QAAQ,CAAS,CAAT,CADqC;AAAA,MAChEK,KADgE;AAAA,MACzDC,QADyD;;AAAA,mBAEtBN,QAAQ,CAAS,CAAT,CAFc;AAAA,MAEhEO,iBAFgE;AAAA,MAE9CC,oBAF8C;;AAAA,mBAGnBR,QAAQ,CAAS,CAAT,CAHW;AAAA,MAGhES,kBAHgE;AAAA,MAG5CC,qBAH4C;;AAAA,mBAIzBV,QAAQ,CAAC,IAAD,CAJiB;AAAA,MAIhEW,eAJgE;AAAA,MAI/CC,kBAJ+C;;AAMvE,WAASC,OAAT,GAAkB;AACdP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASS,iBAAT,GAA4B;AACzB,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA7B;AACAP,IAAAA,kBAAkB,CAACX,UAAU,CAACc,oBAAD,CAAX,CAAlB;AACF;;AAED,WAASK,cAAT,GAAyB;AACrBR,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,sBACA,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AAAEP,MAAAA,KAAK,EAALA,KAAF;AAASE,MAAAA,iBAAiB,EAAjBA,iBAAT;AAA4BE,MAAAA,kBAAkB,EAAlBA,kBAA5B;AAAgDI,MAAAA,OAAO,EAAPA,OAAhD;AAAyDC,MAAAA,iBAAiB,EAAjBA,iBAAzD;AAA4EH,MAAAA,eAAe,EAAfA,eAA5E;AAA6FS,MAAAA,cAAc,EAAdA;AAA7F,KAAnC;AAAA,cACShB;AADT;AAAA;AAAA;AAAA;AAAA,UADA;AAKH;;GAxBeD,kB;;KAAAA,kB","sourcesContent":["import {createContext, ReactNode, useState} from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface ChallengesProviderProps {\r\n    children : ReactNode;\r\n}\r\ninterface ChallengesContextData{\r\n    level : number; \r\n    currentExperience : number;\r\n    challengeCompleted : number; \r\n    levelUp : () => void;\r\n    startNewChallengs : () => void;\r\n    activeChallenge : {\r\n        type : 'body' | 'eye';\r\n        description : string;\r\n        amount : number; \r\n    };\r\n    resetChallenge : () => void;\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\nexport function ChallengesProvider({ children } : ChallengesProviderProps) {\r\n    const [level, setLevel] = useState<number>(1);\r\n    const [currentExperience,setCurrentExperience] = useState<number>(0);\r\n    const [challengeCompleted, setChallengeCompleted] = useState<number>(0);\r\n    const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n    function levelUp(){\r\n        setLevel(level + 1);\r\n    }\r\n\r\n    function startNewChallengs(){\r\n       const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n       setActiveChallenge(challenges[randomChallengeIndex]);\r\n    }\r\n\r\n    function resetChallenge(){\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    return (\r\n    <ChallengesContext.Provider value={{ level, currentExperience, challengeCompleted, levelUp, startNewChallengs, activeChallenge, resetChallenge }}>\r\n            {children}\r\n        </ChallengesContext.Provider>\r\n    );\r\n} "]},"metadata":{},"sourceType":"module"}